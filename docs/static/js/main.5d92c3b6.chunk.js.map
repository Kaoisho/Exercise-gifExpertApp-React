{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCENO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yBAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFJO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECJwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAKGqB,EDlBwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAepB,OACI,qCACA,6BAAKpB,IACJoB,GAAW,mBAAGJ,WAAS,EAAZ,qBACR,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aE3BxBgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,WAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OAEnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCnBjC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5d92c3b6.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types'\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value); //Prueba a imprimir el evento (e) para ver que tiene. Así es como he sacado el e.target.value (Donde se guarda el valor del evento)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2 ) {\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n    }\n\n    return(\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputChange}\n            />\n        </form>\n       \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=cIlwR5ukWhUTMd9NNDpiFLHWZJj74icE`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id:img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n    \n    return gifs;\n}\n/**\n * [Apuntes]\n * En images utilizamos el ?. A la hora de hacer destructuring si ponemos al final el ? estás preguntando si existe el campo img.images.\n * Si existe, sigue con el downsided_medium.url si no, no hace nada o salta un error.\n */"," import React from 'react'\n \n export const GifGridItem = ({title, url}) => {\n\n     return (\n         <div className=\"card animate__bounceIn\">\n             <img src={url} alt={title}/>\n             <p>{title}</p>\n         </div>\n     )\n }\n ","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n// import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ({category}) => {\n\n    // const [images, setImages] = useState([])\n    const {data:images, loading} = useFetchGifs(category);\n    \n\n    // useEffect(() => {\n    //     getGifs( category ).then(imgs => setImages(imgs)); \n    // }, [category]) \n\n    /**\n     * [Apuntes]\n     * Esto es igual que el ciclo de vida de componente: componentDidMount\n     * el [] es un Array de Dependencias. (List tb es array) Al no tener dependencias, useEffect solo se ejecuta una única vez.\n     * Como getGifs ahora es una promesa ya que es una funcion async, podemos poner el .then para indicarle que hacer cuando el fetch se realice correctamente.\n     */\n\n\n    return (\n        <>\n        <h3>{category}</h3>\n        {loading && <p className >Loading</p>}\n            <div className=\"card-grid\">\n                {\n                    images.map( img => (\n                        <GifGridItem \n                            key={img.id} \n                            {...img} \n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n/**\n * [APUNTES]\n * En useEffect, usas category, eso es una dependencia. Asi que hay que ponerlo en el array de dependencias.\n * En nuestra app no haría falta puesto que la lógica es que solo se ejecute getGifs si hacemos submit en lo que escribimos en el form.\n * pero es buena practica hacerlo así, no nos daría el warning y creamos memoria muscular.\n * \n * Hemos separado getGifs como helper porque no es una funcionalidad que deba tener un gifGrid. gifGrid solo se encarga de mostrar imagenes en un grid.\n * asi que es mejor separar el getGifs como un util/helper y así que se pueda utilizar en otros componentes que necesiten esa funcion.\n */\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs';\n\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n    }, [category])\n\n\n\n\n    return state; // { data:[], loading: true };\n\n\n}\n\n\n/**\n * [APUNTES]\n * useEffect no puede ser una funcion asíncrona. ya que espera algo sincrono.\n */\n","import React, {useState} from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    const [categories, setCategories] = useState(['Naruto']);\n\n    // const handleAdd = () => {\n    //     //El handeAdd puede hacerse de varias maneras.\n    //     // setCategories([...categories], 'HunterXHunter') //Añade al final\n    //     // setCategories('HunterXHunter',[...categories]) //Añade al principio\n    //     setCategories(cats => [...cats, 'HunterXHunter'])\n    // }\n\n    return(\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={setCategories}/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map(category => (\n                    {/* return <li key={category}> {category} </li> //Deben tener un key único. NO USAR EL INDICE. Es obligatorio especificar un key en el <li> */},\n                        <GifGrid \n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n/** [APUNTES]\n * <hr/> Representa un cambio de tema entre párrafos (por ejemplo, un cambio de escena en una historia, un cambio de tema en una sección). (Si quieres dibujar una linea, usa el CSS y no esto.)\n * <ol> \"Ordered List\" -> Permite definir listas o viñetas ordenadas. Bien con numeración o Alfabéticamente.\n * <li> \"Item List\" -> Declara cada uno de los elementos de una lista.\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp'\n\nimport './index.css'\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}